<launch>
<arg name="verbose" default="false"/>
<arg name="generate_points" default="true"/>
<arg name="cameras" default="[0,]" />
<arg name="sensor_model" default="helios"/>
<arg name="voxel_leaf" value="0.01" />
<arg name="euc_tolerance" value="0.1" />
<arg name="rviz_name" default="unet.rviz"/>
<arg name="target" default="test"/>
<arg name="show" default="1"/>
<arg name="methods" default="myobb,mvbb,ransac"/>
<arg name="rosbag_subnames" default="test0523,"/>
<arg name="nframe_per_scene" default="20"/>

<arg name="weight_file" value="$(find ros_unet)/weights/iternet_9000.pth"/>
<!--arg name="weight_file" value="$(find ros_unet)/weights/iternet_6500.pth"/-->

<node name="unet_server" pkg="ros_unet" type="ros_unet_server.py" output="screen" required="true">
    <rosparam subst_value="True">
      input_ch: 6
      weight_file: "$(arg weight_file)"
    </rosparam>
</node>

<node name="obb_server" pkg="ros_unet" type="obb_server" output="screen" required="true">
    <rosparam subst_value="True">
      verbose: $(arg verbose)
      min_points_of_cluster: 1
      sensor_model: $(arg sensor_model)
      voxel_leaf: $(arg voxel_leaf)
      euc_tolerance: $(arg euc_tolerance)
      generate_points: $(arg generate_points)
    </rosparam>
</node>
<node name="cgal_server" pkg="ros_unet" type="cgal_server" output="screen" required="true">
    <rosparam subst_value="True">
      verbose: $(arg verbose)
      min_points_of_cluster: 1
      sensor_model: $(arg sensor_model)
      voxel_leaf: $(arg voxel_leaf)
      euc_tolerance: $(arg euc_tolerance)
    </rosparam>
</node>
<node name="ransac_server" pkg="ros_unet" type="ros_ransacobb_server.py" output="screen" required="true">
    <rosparam subst_value="True">
      verbose: $(arg verbose)
    </rosparam>
</node>

<!--node name="floor_detector" pkg="ros_unet" type="floor_detector" output="screen" required="true"/-->
<node name="ros_bg"  pkg="ros_unet" type="ros_bg" output="screen" required="true">
  <rosparam subst_value="True">
    is_service: true
  </rosparam>
</node>

<node name="evaluator"  pkg="ros_unet" type="ros_eval2.py" output="screen" required="true">
    <remap from="~PredictEdge" to="/unet_server/PredictEdge" />
    <remap from="~SetCamera"   to="/obb_server/SetCamera" />
    <remap from="~ComputeObb"  to="/obb_server/ComputeObb" />
    <!--remap from="~FloorDetector/SetCamera"  to="/floor_detector/SetCamera" />
    <remap from="~FloorDetector/ComputeFloor"  to="/floor_detector/ComputeFloor" /-->
    <remap from="~GetBg"  to="/ros_bg/GetBg"/>
    <remap from="~Cgal/ComputeObb"  to="/cgal_server/ComputeObb" />
    <remap from="~Ransac/ComputeObb"  to="/ransac_server/ComputeObb" />
    <param name="~nframe_per_scene" type="int" value="$(arg nframe_per_scene)"/>
    <rosparam subst_value="True">
      nframe_per_scene: "$(arg nframe_per_scene)"
      target: "$(arg target)"
      show: "$(arg show)"
      methods: "$(arg methods)"
      rosbag_subnames: "$(arg rosbag_subnames)"
    </rosparam>
</node>

<node name="rviz" pkg="rviz" type="rviz" args="-d $(find ros_unet)/rviz/$(arg rviz_name)" required="true"/>
<!--arg name="load_config" default="true"/>
<arg name="side" default="down"/>
<group if="$(arg load_config)">
  <node pkg="rostopic" type="rostopic" name="tilt"
  args="pub /unloader/cam_tilt unloader_msgs/MultiarmPose 
  '{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''},
    cam0_tilt: true,
    cam1_tilt: true}' -r 10" required="true" if="$(eval side=='up')"/>
  <node pkg="rostopic" type="rostopic" name="tilt"
  args="pub /unloader/cam_tilt unloader_msgs/MultiarmPose 
  '{header: {seq: 0, stamp: {secs: 0, nsecs: 0}, frame_id: ''},
    cam0_tilt: false,
    cam1_tilt: false}' -r 10" required="true" if="$(eval side=='down')"/>
  <node pkg="tf2_ros" type="static_transform_publisher" name="link0"
  args="0 0 0 0 0 0 1 cam0_rgb_link cam0_rgb_camera_link"/>
  <node pkg="tf2_ros" type="static_transform_publisher" name="link1"
  args="0 0 0 0 0 0 1 cam1_rgb_link cam1_rgb_camera_link"/>
</group>
<include file="$(find unloader_calib)/launch/cam_tf_publisher.launch" if="$(arg load_config)"/>
<rosparam command="load" file="$(find ros_unet)/config/calib_info_for_tf.yaml" if="$(arg load_config)"/-->
<!--node pkg="tf2_ros" type="static_transform_publisher" name="link0"
  args="0 0 0 0 0 0 1  cam0_arena_camera robot"/-->

</launch>
